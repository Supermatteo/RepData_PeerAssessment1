dataStep1 <- read.csv("activity.csv")
aggSum <- aggregate(steps ~ date, data = dataStep, FUN = sum)
avgStp <- aggregate(steps ~ interval, data = dataStep, FUN = mean)
for (i in 1:dim(dataStep)) {
if (is.na(dataStep[i,1] == TRUE)) {
dataStep[i,1] <<- avgStp[avgStp$interval == dataStep[i,3],2]
}
}
for (i in 1:dim(dataStep)) {
if (is.na(dataStep[i,1] == TRUE)) {
dataStep[i,1] <<- avgStp[avgStp$interval == dataStep[i,3],2]
}}
for (i in 1:dim(dataStep)) {
if (is.na(dataStep[i,1] == TRUE)) {
dataStep[i,1] <- avgStp[avgStp$interval == dataStep[i,3],2]
}
}
dataStep <- read.csv("activity.csv")
datana <- read.csv("activity.csv")
avgStp <- aggregate(steps ~ interval, data = dataStep, FUN = mean)
avgStp1 <- aggregate(steps ~ interval, data = dataStep, FUN = mean)
sum(is.na(dataStep))
datana <- for (i in 1:dim(dataStep)) {
if (is.na(dataStep[i,1] == TRUE)) {
dataStep[i,1] <<- avgStp[avgStp$interval == dataStep[i,3],2]
}
}
for (i in 1:dim(dataStep)) {
if (is.na(dataStep[i,1] == TRUE)) {
datana[i,1] <<- avgStp[avgStp$interval == dataStep[i,3],2]
}
}
for (i in 1:dim(dataStep)) {
if (is.na(dataStep[i,1] == TRUE)) {
datana[i,1] <- avgStp[avgStp$interval == dataStep[i,3],2]
}
}
sum(is.na(dataStep))
sum(is.na(datana))
plot(avgStp$interval, avgStp$steps, type = "l")
avgStp1 <- aggregate(steps ~ interval, data = datana, FUN = mean)
plot(avgStp1$interval, avgStp1$steps, type = "l")
hea(dataStp1)
head(dataStep1)
head(dataStep)
head(datana)
dataStep <- read.csv("activity.csv")
avgStp <- aggregate(steps ~ interval, data = dataStep, FUN = mean)
dataNoNa <- dataStep
for (i in 1:dim(dataStep)) {
if (is.na(dataStep[i,1] == TRUE)) {
dataNoNa[i,1] <- avgStp[avgStp$interval == dataStep[i,3],2]
}
}
avgStpNoNa <- aggregate(steps ~ interval, data = dataNoNa, FUN = mean)
avgStpNoNa
avgStp
head(avgStp)
head(avgStpNoNa)
dataNoNa <- dataStep
for (i in 1:dim(dataNoNa)) {
if (is.na(dataNoNa[i,1] == TRUE)) {
dataNoNa[i,1] <<- avgStp[avgStp$interval == dataNoNa[i,3],2]
}
}
avgNoNa <- aggregate(steps ~ interval, data = dataNoNa, FUN = mean)
plot(avgNoNa$interval, avgNoNa$steps, type = "l")
head(avgNoNa)
head(avgStp)
head(dataNoNa)
dataNoNa <- dataStep
for (i in 1:dim(dataNoNa)) {
if (is.na(dataNoNa[i,1] == TRUE)) {
dataNoNa[i,1] <- avgStp[avgStp$interval == dataNoNa[i,3],2]
}
}
avgNoNa <- aggregate(steps ~ interval, data = dataNoNa, FUN = mean)
plot(avgNoNa$interval, avgNoNa$steps, type = "l")
head(avgNoNa)
head(avgStp)
summary(avgNoNa)
summary(avgS)
summary(avgStp)
source('~/R/RepData_PeerAssessment1/Replace.R')
source('~/R/RepData_PeerAssessment1/Replace.R')
ina()
source('~/R/RepData_PeerAssessment1/Replace.R')
ina()
source('~/R/RepData_PeerAssessment1/Replace.R')
ina()
source('~/R/RepData_PeerAssessment1/Replace.R')
ina()
dim(dataNoNa)
dataStep <- read.csv("activity.csv")
length(dataStep)
?length
?colMeans
?weekdays
head(dataStep)
dataStep$weekday <- weekdays(dataStep$date)
dataStep$date <- as.date(dataStep$date)
sapply(dataStep, class)
dataStep$date <- as.Date(dataStep$date)
dataStep
dataStep$weekday <- weekdays(dataStep$date)
dataStep
sapply(dataStep, class)
dataStep$weekday <- as.factor(dataStep$weekday)
sapply(dataStep, class)
dataNoNa <- dataStep
for (i in 1:dim(dataNoNa)) {
if (is.na(dataNoNa[i,1] == TRUE)) {
dataNoNa[i,1] <- avgStp[avgStp$interval == dataNoNa[i,3],2]
}
}
source('~/R/RepData_PeerAssessment1/Replace.R')
setwd("C:\\Users\\Automation\\Documents\\R\\RepData_PeerAssessment1")
unzip("activity.zip")
dataStep <- read.csv("activity.csv")
aggSum <- aggregate(steps ~ date, data = dataStep, FUN = sum)
hist(aggSum$step, 53, main = "Steps per day", xlim = c(0,25000))
mean(aggSum$steps)
meanStep <- mean(aggSum$step)
medianStep <- median(aggSum$step)
meanStep
medianStep
avgStp <- aggregate(steps ~ interval, data = dataStep, FUN = mean)
plot(avgStp$interval, avgStp$steps, type = "l")
maxStp <- avgStp[max(avgStp$steps),1]
maxStp
sum(is.na(dataStep))
dataNoNa <- dataStep
for (i in 1:dim(dataNoNa[1])) {
if (is.na(dataNoNa[i,1] == TRUE)) {
dataNoNa[i,1] <- avgStp[avgStp$interval == dataNoNa[i,3],2]
}
}
avgNoNa <- aggregate(steps ~ interval, data = dataNoNa, FUN = mean)
plot(avgNoNa$interval, avgNoNa$steps, type = "l")
aggNoNa <- aggregate(steps ~ date, data = dataNoNa, FUN = sum)
hist(aggNoNa$step, 53, main = "Steps per day no Na", xlim = c(0,25000))
stepsDayNoNa <- aggregate(steps ~ date, data = dataNoNa, FUN = sum)
meanNoNa <- mean(stepsDayNoNa$step)
medianNoNa <- median(stepsDayNoNa$step)
meanNoNa
medianNoNa
dataNoNa$weekday <- as.factor(weekdays(as.Date(dataNoNa$date)))
dataNoNa$weekday <- dataNoNa[dataNoNa$weekday="Monday|Tuesday|Wednesday|Thursday|Friday",4] == "Weekday"
dataNoNa$weekday <- dataNoNa[dataNoNa$weekday="Monday|Tuesday|Wednesday|Thursday|Friday",4] = "Weekday"
?replace
examples(replace)
example(replace)
replace(dataNoNa$weekday, c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), "Weekday")
dataNoNa$weekday  <- replace(dataNoNa$weekday, c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), "Weekday")
dataNoNa$weekday  <- replace(dataNoNa$weekday, dataNoNa$weekday== c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), "Weekday")
dataNoNa$weekday
dataNoNa$weekday <- dataNoNa[dataNoNa$weekday="Monday|Tuesday|Wednesday|Thursday|Friday",] == "Weekday"
dataNoNa$weekday <- dataNoNa[dataNoNa$weekday="Monday|Tuesday|Wednesday|Thursday|Friday",] = "Weekday"
daylist = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
dataNoNa$weekday <- dataNoNa[dataNoNa$weekday %in% daylist,] == "Weekday"
dataNoNa$weekday <- dataNoNa[dataNoNa$weekday="Monday",] == "Weekday"
dataNoNa$weekday <- dataNoNa[dataNoNa$weekday=="Monday",] == "Weekday"
dataNoNa[dataNoNa$weekday=="Monday",] <- "Weekday"
y <- gl(2, 4, 8)
levels(y) <- c("low", "high")
y
z <- gl(3, 2, 12)
levels(z) <- c("A", "B", "A")
z
?gl
source('~/R/RepData_PeerAssessment1/Replace.R')
source('~/R/RepData_PeerAssessment1/Replace.R')
dataNoNa$weekday[dataNoNa$weekday == "Monday"] <- "Weekday"
str(dataNoNa$weekday)
dataNoNa$weekday
dataNoNa <- dataStep
dataNoNa$weekday <- as.character(dataNoNa$weekday)
dataNoNa$weekday
dataNoNa <- dataStep
head(dataNoNa)
dataNoNa$weekday <- as.factor(weekdays(as.Date(dataNoNa$date)))
dataNoNa$weekday <- as.character(dataNoNa$weekday)
dataNoNa$weekday[dataNoNa$weekday == "Monday"] <- "Weekday"
dataNoNa$weekday[dataNoNa$weekday == "Tuesday|Wednesday|Thursday|Friday"] <- "Weekday"
dataNoNa$weekday
dataNoNa$weekday[dataNoNa$weekday == "Tuesday"] <- "Weekday"
dataNoNa$weekday[dataNoNa$weekday == "Wednesday"] <- "Weekday"
dataNoNa$weekday[dataNoNa$weekday == "Thursday"] <- "Weekday"
dataNoNa$weekday[dataNoNa$weekday == "Friday"] <- "Weekday"
dataNoNa$weekday[dataNoNa$weekday == "Saturday"] <- "Weekend"
dataNoNa$weekday[dataNoNa$weekday == "Sunday"] <- "Weekend"
dataNoNa$weekday <- as.factor(dataNoNa$weekday)
dataNoNa$weekday
str(dataNoNa$weekday)
dataNoNa <- dataStep
dataNoNa$weekday <- as.character(weekdays(as.Date(dataNoNa$date)))
daylist = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
dataNoNa$weekday[dataNoNa$weekday == daylist] <- "Weekday"}
source('~/R/RepData_PeerAssessment1/Replace.R')
WeekAvg <- aggregate(steps ~ weekday, data = dataNoNa, mean)
head(WeekAvg)
WeekAvg <- aggregate(steps ~ interval,weekday, data = dataNoNa, mean)
WeekAvg <- aggregate(steps ~ c(interval,weekday), data = dataNoNa, mean)
?aggregate
WeekAvg <- aggregate(steps ~ interval + weekday, data = dataNoNa, mean)
WeekAvg
dataNoNa$weekday <- as.character(weekdays(as.Date(dataNoNa$date)))
dataNoNa$weekday[dataNoNa$weekday == "Monday"] <- "Weekday"
dataNoNa$weekday[dataNoNa$weekday == "Tuesday"] <- "Weekday"
dataNoNa$weekday[dataNoNa$weekday == "Wednesday"] <- "Weekday"
dataNoNa$weekday[dataNoNa$weekday == "Thursday"] <- "Weekday"
dataNoNa$weekday[dataNoNa$weekday == "Friday"] <- "Weekday"
dataNoNa$weekday[dataNoNa$weekday == "Saturday"] <- "Weekend"
dataNoNa$weekday[dataNoNa$weekday == "Sunday"] <- "Weekend"
dataNoNa$weekday <- as.factor(dataNoNa$weekday)
WeekAvg <- aggregate(steps ~ interval + weekday, data = dataNoNa, mean)
WeekAvg
names(WeekAvg)
plot(WeekAvg$interval, WeekAvg$steps, type = "l")
?melt
library(plyr)
?melt
library(reshape2)
?melt
plot(WeekAvg$steps~interval, type="l")
plot(WeekAvg$steps~WeekAvg$interval, type="l")
plot(WeekAvg$steps~WeekAvg$interval, type="l", col = "red", axes = F)
axis(1, WeekAvg$interval, format(WeekAvg$interval, "%h-%m"))
axis(1, rdate, format(rdate, "%h-%m"))
?melt
wavg <- dcast(WeekAvg, interval + date ~ steps)
wavg <- dcast(WeekAvg, interval + wekday ~ steps)
wavg <- dcast(WeekAvg, interval + weekday ~ steps)
wavg
names(WeekAvg)
?dcast
wavg <- dcast(WeekAvg, weekday ~ interval, value.var = "steps")
wavg
wavg <- dcast(WeekAvg, interval ~ weekday, value.var = "steps")
wavg
names(WeekAvg)
ggplot(WeekAvg, aes(x=interval, y = steps, color = weekday)) + geom_point()
library(ggplot2)
ggplot(WeekAvg, aes(x=interval, y = steps, color = weekday)) + geom_point()
ggplot(WeekAvg, aes(x=interval, y = steps, color = weekday)) + geom_point()+ facet_grid(variable ~ .)
ggplot(WeekAvg, aes(x=interval, y = steps, color = weekday)) + geom_line()+
)
ggplot(WeekAvg, aes(x=interval, y = steps, color = weekday)) + geom_line ()
ggplot(Wavg, aes(x=interval, y = steps, color = weekday)) + geom_line ()
ggplot(wavg, aes(x=interval, y = steps, color = weekday)) + geom_line ()
names(wavg)
ggplot(wavg, aes(x=interval, y = value, color = weekday)) + geom_line ()
ggplot(wavg, aes(x=interval, y = value, group = weekday, color = weekday)) + geom_line ()
ggplot(WeekAvg, aes(x=interval, y = steps, group = weekday, color = weekday)) + geom_line ()
ggplot(WeekAvg, aes(x=interval, y = steps, group = weekday, color = weekday)) + geom_line (size = 4)
ggplot(WeekAvg, aes(x=interval, y = steps, group = weekday, color = weekday)) + geom_line (size = 2)
ggplot(WeekAvg, aes(x=interval, y = steps, group = weekday, color = weekday)) + geom_line (size = 1)
ggplot(WeekAvg, aes(x=interval, y = steps, group = weekday, color = weekday)) + geom_line (size = 1) +scale_x_datetime(labels = date_format("%H:%M"),breaks = "1 hour")
ggplot(WeekAvg, aes(x=interval, y = steps, group = weekday, color = weekday)) + geom_line (size = 1) +scale_x_datetime(labels = date_format("%H:%M"),breaks = "1 hour")
?date_format
ggplot(WeekAvg, aes(x=interval, y = steps, group = weekday, color = weekday)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "1 hour")
p <- ggplot(WeekAvg, aes(x=interval, y = steps, group = weekday, color = weekday)) + geom_line (size = 1)
p1 <- p + scale_x_datetime(labels = date_format("%H:%M"),breaks = "1 hour")
p1 <- p +scale_x_datetime(labels = date_format("%H:%M"))
library(scales)
p1 <- p + scale_x_datetime(labels = date_format("%H:%M"),breaks = "1 hour")
p1
plot(p1)
p1 <- p + scale_x_datetime(labels = date_format("%H:%M"))
plot(p1)
names(WeekAvg)
sptm <- t(sapply(WeekAvg$interval, function(x) substring(x, first = c(1,2))))
sptm
sptm <- t(sapply(WeekAvg$interval, function(x) substring(x, first = c(1,2), last = c(1,3))))
sptm
?substring
sptm <- t(sapply(WeekAvg$interval, function(x) substring(x, first = c(2,2), last = c(1,4))))
?substring
sptm
WeekAvg$interval
minutes <- WeekAvg$interval%/%10
minutes
minutes <- WeekAvg$interval%/%1000
minutes
minutes <- WeekAvg$interval%/%100
minutes
hours <- WeekAvg$interval%/%100
minutes <- WeekAvg$interval - hours *1000
minutes
minutes <- WeekAvg$interval - hours *100
minutes
time <- cbind(hours, minutes)
time
?strftime
strptime(time, "%H:%M")
time
strptime(time, "%H:%M")?sprintf
?sprintf
names(time)
time
sprintf("%s:%s:00", time$hours, time$minutes)
class(time)
time<-as.data.frame(time)
sprintf("%s:%s:00", time$hours, time$minutes)
?ISOdatetime
date1 <- strptime(date, format = "")
date1 <- sprintf("%s:%s:00", time$hours, time$minutes)
date1 <- as.numeric(date1)
date1
date
time
time <- cbind(WeekAvg$interval%/%100, WeekAvg$interval-(WeekAvg$interval%/%100)*100)
time
?format
?ISOdatetime
date2 <- ISOdatetime(2015, 01, 01, time$hours, time$minutes)
sapply(time, class)
class
class(time)
time <- as.data.frame(time)
date2 <- ISOdatetime(2015, 01, 01, time$hours, time$minutes)
date2 <- ISOdatetime(2015, 01, 01, time$hours, time$minutes, 00)
date2
?lapply
date2 <- lapply(time, (ISOdatetime(2015, 01, 01, time$hours, time$minutes, 00)))
date2 <- lapply(time, (function (x) ISOdatetime(2015, 01, 01, time$hours, time$minutes, 00)))
date2
time2 <- as.POSIXct(time)
time2 <- as.POSIXct(time)
time2 <- as.POSIXct(time$hours)
date2 <- (ISOdatetime(2015, 01, 01, time$hours[1,1], time$minutes[1,2], 00)))
date2 <- (ISOdatetime(2015, 01, 01, time$hours[1,1], time$minutes[1,2], 00))
date2
date2 <- ISOdatetime(2015, 01, 01, time$hours[1,1], time$minutes[1,2], 00)
date
date2
date2 <- ISOdatetime(2015, 01, 01, 0, 5, 00)
date2
sapply(time, class)
names(time)
date2 <- ISOdatetime(2015, 01, 01, time[1,1], time[1,2], 00)
date2
date2 <- ISOdatetime(2015, 01, 01, time$V1, time$V2, 00)
date2
?strptime
time2 <- ISOdatetime(2015, 01, 01, time$V1, time$V2, 00)
time3 <- strptime(time2, "%H:%M:%S")
time3
library(lubridate)
time4 <- ymd_hms(time3)
time4
time3
time4 <- ymd_hms(time2)
time4
time2
h.time <- hour(time4) + minute(time4)
h.time
h.time <- hour(time4) + minute(time4)/60
h.time
ggplot(WeekAvg, aes(x=interval, y = steps, group = weekday, color = weekday)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "1 hour")
WeekAvg$time2 <- h.time
WeekAvg$time2
ggplot(WeekAvg, aes(x=time2, y = steps, group = weekday, color = weekday)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "1 hour")
class(WeekAvg$time2)
WeekAvg$time2 <- time2
ggplot(WeekAvg, aes(x=time2, y = steps, group = weekday, color = weekday)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "1 hour")
ggplot(WeekAvg, aes(x=time2, y = steps, group = weekday, color = weekday)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "1 hour") + theme(axis.text=element_text(size=12) + axis.title=element_text(size=14,face="bold"))
ggplot(WeekAvg, aes(x=time2, y = steps, group = weekday, color = weekday)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "1 hour") + theme (axis.text=element_text(size=12)
)
ggplot(WeekAvg, aes(x=time2, y = steps, group = weekday, color = weekday)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "1 hour") + theme (axis.text=element_text(size=8))
ggplot(WeekAvg, aes(x=time2, y = steps, group = weekday, color = weekday)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "2 hour") + theme (axis.text=element_text(size=8))
dim(WeekAvg)
head(WeekAvg)
wkd<-WeekAvg[1:288,]
tail(wkd)
wkd<-WeekAvg[288:576,]
wkd<-WeekAvg[1:288,]
wke<-WeekAvg[288:576,]
tail(wke)
tail(WeekAvg)
pwd <- ggplot(wkd, aes(x=time2, y = steps)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "2 hour") + theme (axis.text=element_text(size=8))
pwe <- ggplot(wke, aes(x=time2, y = steps)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "2 hour") + theme (axis.text=element_text(size=8))
pwd
pwe
pwe <- ggplot(wke, aes(x=time2, y = steps, col = red)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "2 hour") + theme (axis.text=element_text(size=8))
pwe
pwe <- ggplot(wke, aes(x=time2, y = steps, col = "red")) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "2 hour") + theme (axis.text=element_text(size=8))
pwe
pwe <- ggplot(wke, aes(x=time2, y = steps)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "2 hour") + theme (axis.text=element_text(size=8))
multiplot(pwd, pwe, col = 1)
multiplot(pwd, pwe, col = 1)
library(ggplot2)
?multiplot
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(pwd, pwe, col = 1)
multiplot(pwd, pwe, col = 1)
par(mfrow = c(2,1))
pwd
pwe
grid.arrange(pwd, pwe, ncol = 1, main = "Main title")
library(ggplot2)
library(grid)
library(gridExtra)
grid.arrange(pwd, pwe, ncol = 1, main = "Main title")
setwd("C:\\Users\\Automation\\Documents\\R\\RepData_PeerAssessment1")
unzip("activity.zip")
dataStep <- read.csv("activity.csv")
aggSum <- aggregate(steps ~ date, data = dataStep, FUN = sum)
hist(aggSum$step, 53, main = "Steps per day", xlim = c(0,25000))
mean(aggSum$steps)
meanStep <- mean(aggSum$step)
medianStep <- median(aggSum$step)
meanStep
medianStep
avgStp <- aggregate(steps ~ interval, data = dataStep, FUN = mean)
plot(avgStp$interval, avgStp$steps, type = "l")
maxStp <- avgStp[max(avgStp$steps),1]
maxStp
sum(is.na(dataStep))
dataNoNa <- dataStep
for (i in 1:dim(dataNoNa[1])) {
if (is.na(dataNoNa[i,1] == TRUE)) {
dataNoNa[i,1] <- avgStp[avgStp$interval == dataNoNa[i,3],2]
}
}
avgNoNa <- aggregate(steps ~ interval, data = dataNoNa, FUN = mean)
plot(avgNoNa$interval, avgNoNa$steps, type = "l")
aggNoNa <- aggregate(steps ~ date, data = dataNoNa, FUN = sum)
hist(aggNoNa$step, 53, main = "Steps per day no Na", xlim = c(0,25000))
stepsDayNoNa <- aggregate(steps ~ date, data = dataNoNa, FUN = sum)
meanNoNa <- mean(stepsDayNoNa$step)
medianNoNa <- median(stepsDayNoNa$step)
meanNoNa
medianNoNa
library(scales)
library(ggplot2)
library(grid)
library(gridExtra)
dataNoNa$weekday <- as.character(weekdays(as.Date(dataNoNa$date)))
dataNoNa$weekday[dataNoNa$weekday == "Monday"] <- "Weekday"
dataNoNa$weekday[dataNoNa$weekday == "Tuesday"] <- "Weekday"
dataNoNa$weekday[dataNoNa$weekday == "Wednesday"] <- "Weekday"
dataNoNa$weekday[dataNoNa$weekday == "Thursday"] <- "Weekday"
dataNoNa$weekday[dataNoNa$weekday == "Friday"] <- "Weekday"
dataNoNa$weekday[dataNoNa$weekday == "Saturday"] <- "Weekend"
dataNoNa$weekday[dataNoNa$weekday == "Sunday"] <- "Weekend"
dataNoNa$weekday <- as.factor(dataNoNa$weekday)
time <- cbind(WeekAvg$interval%/%100, WeekAvg$interval-(WeekAvg$interval%/%100)*100)
WeekAvg <- aggregate(steps ~ interval + weekday, data = dataNoNa, mean)
time <- cbind(WeekAvg$interval%/%100, WeekAvg$interval-(WeekAvg$interval%/%100)*100)
time2 <- ISOdatetime(2015, 01, 01, time$V1, time$V2, 00)
pwe <- ggplot(wke, aes(x=time2, y = steps)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "2 hour") + theme (axis.text=element_text(size=8))
pwd <- ggplot(wkd, aes(x=time2, y = steps)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "2 hour") + theme (axis.text=element_text(size=8))
grid.arrange(pwd, pwe, ncol = 1, main = "Main title")
class(time)
time2 <- ISOdatetime(2015, 01, 01, as.numeric(time$V1), as.numeric(time$V2), 00)
time <- as.data.frame(time)
time2 <- ISOdatetime(2015, 01, 01, as.numeric(time$V1), as.numeric(time$V2), 00)
pwe <- ggplot(wke, aes(x=time2, y = steps)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "2 hour") + theme (axis.text=element_text(size=8))
pwd <- ggplot(wkd, aes(x=time2, y = steps)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "2 hour") + theme (axis.text=element_text(size=8))
grid.arrange(pwd, pwe, ncol = 1, main = "Main title")
wke<-WeekAvg[288:576,]
wkd<-WeekAvg[1:288,]
pwe <- ggplot(wke, aes(x=time2, y = steps)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "2 hour") + theme (axis.text=element_text(size=8))
pwd <- ggplot(wkd, aes(x=time2, y = steps)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "2 hour") + theme (axis.text=element_text(size=8))
grid.arrange(pwd, pwe, ncol = 1, main = "Main title")
pwe
wke
time2 <- ISOdatetime(2015, 01, 01, time$V1, time$V2, 00)
WeekAvg$time2 <- time2
time2 <- ISOdatetime(2015, 01, 01, time$V1, time$V2, 00)
WeekAvg$time2 <- time2
wkd<-WeekAvg[1:288,]
wke<-WeekAvg[288:576,]
pwe <- ggplot(wke, aes(x=time2, y = steps)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "2 hour") + theme (axis.text=element_text(size=8))
pwe
pwd <- ggplot(wkd, aes(x=time2, y = steps)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "2 hour") + theme (axis.text=element_text(size=8))
grid.arrange(pwd, pwe, ncol = 1, main = "Main title")
pwe <- ggplot(wke, aes(x=time2, y = steps)) + geom_line (size = 1) + scale_x_datetime(labels = date_format("%H:%M"),breaks = "2 hour") + theme (axis.text=element_text(size=8)) + xlab("Hour")
pwe
knit2html("PA1.Rmd")
library(knitr)
knit2html("PA1.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
